# See:
#   https://hub.docker.com/r/jboss/keycloak
#   https://www.keycloak.org/server/containers
# To create .env file for this compose.yaml file:
#   ./create_env_file.sh > .env
# To run this file (from this file's directory):
#   docker compose up --detach
#   docker compose logs --follow
# To remove containers and volumes:
#   docker compose down --volumes
networks:
  keycloak-network:
volumes:
  keycloak-db-volume:
  keycloak-https-config:
services:
  # Run-once service to generate certificates
  create-https-config:
    image: ubuntu
    restart: no
    volumes:
      - keycloak-https-config:/https-config
    entrypoint: ["/bin/bash"]
    command:
      - "-c"
      - |
        set -e
        set -o pipefail
        
        # Install openssl
        apt-get update
        apt-get install --yes openssl

        # Create output directory 
        CONFIG_DIR='/https-config/keycloak.local.6871.uk'
        mkdir "$${CONFIG_DIR:?}"
                
        # Define files
        HTTPS_CERT="$${CONFIG_DIR:?}/cert.pem"
        HTTPS_KEY="$${CONFIG_DIR:?}/key.pem"
        
        # Define the DN (Distinguished Name); different forms exist:
        #   openssl: /C=GB/O=6871/CN=keycloak.local.6871.uk
        #   keytool: CN=keycloak.local.6871.uk,O=6871,C=GB
        DN='/C=GB/O=6871/CN=keycloak.local.6871.uk'
        
        # Create cert and private key (using -nodes for unencrypted key as not
        # sure Keycloak supports keys encrypted using -passout)
        openssl \
          req \
            -x509 \
            -subj "$${DN:?}" \
            -days 365 \
            -newkey rsa:4096 \
            -out "$${HTTPS_CERT:?}" \
            -nodes \
            -keyout "$${HTTPS_KEY:?}"
        
        # Add keycloak user
        useradd keycloak
        
        # Set minimal config directory and file permissions
        chown --recursive keycloak:root "$${CONFIG_DIR:?}"
        chmod 500 "$${CONFIG_DIR:?}"
        chmod 400 "$${HTTPS_CERT:?}"
        chmod 400 "$${HTTPS_KEY:?}"

        printf 'ls -la /\n'
        ls -la /
        
        printf 'ls -la /https-config\n'
        ls -la /https-config

        printf 'ls -la /https-config/keycloak.local.6871.uk\n'
        ls -la /https-config/keycloak.local.6871.uk
        
        echo "$${HTTPS_CERT:?}"
        cat "$${HTTPS_CERT:?}"
        
        echo "$${HTTPS_KEY:?}"
        cat "$${HTTPS_KEY:?}"

  # Authentication server
  keycloak:
    # https://www.keycloak.org/server/enabletls
    # https://www.keycloak.org/server/all-config
    depends_on:
      - create-https-config
      - keycloak-db
    image: quay.io/keycloak/keycloak:22.0.3
    volumes:
      - keycloak-https-config:/https-config:ro
    command: ["--verbose", "start", "--optimized"]
    environment:
      KC_HOSTNAME: "keycloak.local.6871.uk"
      KC_HTTPS_CERTIFICATE_FILE: "/https-config/keycloak.local.6871.uk/cert.pem"
      KC_HTTPS_CERTIFICATE_KEY_FILE: "/https-config/keycloak.local.6871.uk/key.pem"
      KC_HTTPS_PORT: 443
      KEYCLOAK_ADMIN: "${KEYCLOAK_ADMIN_USER:?}"
      KEYCLOAK_ADMIN_PASSWORD: "${KEYCLOAK_ADMIN_USER_PASSWORD:?}"
      DB_VENDOR: POSTGRES
      DB_ADDR: keycloak-db
      DB_DATABASE: keycloak-db
      DB_USER: "${KEYCLOAK_DB_USER:?}"
      DB_PASSWORD: "${KEYCLOAK_DB_USER_PASSWORD:?}"
    ports:
      # Match internal and external port to avoid "iss claim not valid" errors
      - "443:443"
    networks:
      keycloak-network:
        aliases:
          # Without this alias, a service trying to call this service with a
          # URL such as https://keycloak.local.6871.uk/realms (i.e. one
          # resolving to 127.0.0.1) would call itself (i.e. 127.0.0.1); to fix
          # this, this alias maps host name keycloak.local.6871.uk to this
          # keycloak service instead
          - keycloak.local.6871.uk
  # Authentication server database
  keycloak-db:
    image: postgres:13
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_DB: keycloak-db
      POSTGRES_USER: "${KEYCLOAK_DB_USER:?}"
      POSTGRES_PASSWORD: "${KEYCLOAK_DB_USER_PASSWORD:?}"
    volumes:
      - keycloak-db-volume:/var/lib/postgresql/data
    networks:
      - keycloak-network
  # Run-once container that waits for the keycloak-sso service to start, then
  # runs some example authentication functions
  auth-cli-demo:
    image: ubuntu
    restart: no
    depends_on:
      - keycloak
    environment:
      AUTH_HOST: https://keycloak.local.6871.uk
      AUTH_VENDOR: keycloak
      AUTH_REALM: master
      AUTH_USERNAME: "${KEYCLOAK_ADMIN_USER:?}"
      AUTH_PASSWORD: "${KEYCLOAK_ADMIN_USER_PASSWORD:?}"
      AUTH_CLIENT_ID: admin-cli
      AUTH_SCOPE: openid
    volumes:
      # Mount example sql and bash directories in /examples in the container
      - ../bash:/examples/bash:ro
      # Mount HTTPS config in order to import and "trust" the "untrusted"
      # keycloak service certificate (avoids using curl --insecure)
      - keycloak-https-config:/https-config:ro
    networks:
      - keycloak-network
    entrypoint: ["/bin/bash"]
    command:
      - "-c"
      - |
        set -e
        set -o pipefail
        
        printf 'Installing curl...\n'
        apt-get update
        apt-get install --yes curl
        
        printf 'Installing python3...\n'
        apt-get install --yes python3
        python3 --version
        
        # Trust keycloak service's certificate (avoids e.g. curl --insecure)
        KEYCLOAK_CERT='/https-config/keycloak.local.6871.uk/cert.pem'
        HOST_CA_CERTS='/etc/ssl/certs/ca-certificates.crt'
        cat "$${KEYCLOAK_CERT:?}" >> "$${HOST_CA_CERTS:?}"
        
        printf 'Waiting for Keycloak host to be ready...\n'
        MAX_RETRIES=60
        COMPLETED_OK='NO'
        for ((i = 0; i < $${MAX_RETRIES:?}; i++)); do
          printf 'Connection attempt %s/%s\n' "$((i + 1))" "$${MAX_RETRIES:?}"
          if curl "$${AUTH_HOST:?}"; then
            printf 'Connection established\n'
            COMPLETED_OK='YES'
            break
          else
            sleep 1
          fi
        done
        
        if [ "$${COMPLETED_OK:?}" != 'YES' ]; then
          printf 'Timed out waiting for Keycloak host, exiting with error...\n'
          exit 1
        fi
        
        printf 'Sourcing auth.sh...\n'
        source /examples/bash/auth.sh
        
        printf 'Obtain and print authentication token...\n'
        auth_login
        echo
        
        printf 'Obtain and print formatted authentication token...\n'
        auth_login | json_format
        echo
        
        printf 'Obtain and print access token...\n'
        auth_login | json_get_access_token
        echo
        
        printf 'Obtain, print and decode access token...\n'
        auth_login | json_get_access_token | auth_decode_access_token

        printf 'Obtain and verify access token...\n'
        if auth_login | json_get_access_token | auth_verify; then
          echo 'OK: token validation was successful'
        else
          echo 'Error: token validation failed'
          exit 1
        fi
        
        printf 'Obtain and verify access token with JSON output formatting...\n'
        if auth_login | json_get_access_token | auth_verify | json_format; then
          echo 'OK: token validation was successful'
        else
          echo 'Error: token validation failed'
          exit 1
        fi
        
        printf 'Attempt to verify with an invalid access token...\n'
        if echo 'AN-INVALID-ACCESS-TOKEN' | auth_verify | json_format; then
          echo 'Error: token did not fail to validate'
          exit 1
        else
          echo 'OK: invalid token was detected'
        fi
