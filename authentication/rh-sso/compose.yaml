# Requires:
#   docker login registry.redhat.io
# See:
#   https://developers.redhat.com
networks:
  rh-sso-network:
volumes:
  rh-sso-db-volume:
services:
  # Authentication server
  rh-sso:
    image: registry.redhat.io/rh-sso-7/sso76-openshift-rhel8
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: rh-sso-db
      DB_DATABASE: rh-sso-db
      DB_USER: rh-sso-db-user
      DB_PASSWORD: rh-sso-db-user-password
      KEYSTORE_PASSWORD: admin
      SSO_ADMIN_USERNAME: admin
      SSO_ADMIN_PASSWORD: admin
      SSO_ADMIN_CONSOLE: true
    ports:
      # Match internal and external port to avoid "iss claim not valid" errors
      - "8080:8080"
    depends_on:
      - rh-sso-db
    networks:
      rh-sso-network:
        aliases:
          # Without this alias, a service trying to call this service with a
          # URL such as http://rh-sso.local.6871.uk:8080/auth/realms (i.e. one
          # that resolves to 127.0.0.1) would call itself (i.e. 127.0.0.1); to
          # fix this, the alias maps host name rh-sso.local.6871.uk to the
          # rh-sso service instead
          - rh-sso.local.6871.uk
  # Authentication server database
  rh-sso-db:
    image: postgres:13
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_DB: rh-sso-db
      POSTGRES_USER: rh-sso-db-user
      POSTGRES_PASSWORD: rh-sso-db-user-password
    volumes:
      - rh-sso-db-volume:/var/lib/postgresql/data
    networks:
      - rh-sso-network
  # Run-once container that waits for the rh-sso service to start, then runs
  # some example authentication functions
  auth-cli-demo:
    image: ubuntu
    restart: no
    depends_on:
      - rh-sso
    environment:
      AUTH_HOST: http://rh-sso.local.6871.uk:8080
      AUTH_REALM: master
      AUTH_USERNAME: admin
      AUTH_PASSWORD: admin
      AUTH_CLIENT_ID: admin-cli
    volumes:
      # Mount example sql and bash directories in /examples in the container
      - ../bash:/examples/bash:ro
    networks:
      - rh-sso-network
    entrypoint: ["/bin/bash"]
    command:
      - "-c"
      - |
        set -e
        set -o pipefail
        
        printf 'Installing curl...\n'
        apt-get update
        apt-get install --yes curl
        
        printf 'Installing python3...\n'
        apt-get install --yes python3
        python3 --version
        
        printf 'Waiting for RH SSO...\n'
        MAX_RETRIES=60
        COMPLETED_OK='NO'
        for ((i = 0; i < $${MAX_RETRIES:?}; i++)); do
          printf 'Connection attempt %s/%s\n' "$((i + 1))" "$${MAX_RETRIES:?}"
          if curl "$${AUTH_HOST:?}"; then
            printf 'Connection established\n'
            COMPLETED_OK='YES'
            break
          else
            sleep 1
          fi
        done
        
        if [ "$${COMPLETED_OK:?}" != 'YES' ]; then
          printf 'Timed out waiting for RH SSO, exiting with error...\n'
          exit 1
        fi
        
        printf 'Sourcing auth.sh...\n'
        source /examples/bash/auth.sh
        
        printf 'Obtain and print authentication token...\n'
        auth_login
        echo
        
        printf 'Obtain and print formatted authentication token...\n'
        auth_login | json_format
        echo
        
        printf 'Obtain and print access token...\n'
        auth_login | json_get_access_token
        echo
        
        printf 'Obtain, print and decode access token...\n'
        auth_login | json_get_access_token | auth_decode_access_token

        printf 'Obtain and verify access token...\n'
        if auth_login | json_get_access_token | auth_verify | json_format; then
          echo 'OK: token validation was successful'
        else
          echo 'Error: token validation failed'
          exit 1
        fi
        
        printf 'Attempt to verify with an invalid access token...\n'
        if echo 'AN-INVALID-ACCESS-TOKEN' | auth_verify | json_format; then
          echo 'Error: token did not fail to validate'
          exit 1
        else
          echo 'OK: invalid token was detected'
        fi
